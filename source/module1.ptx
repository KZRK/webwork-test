<?xml version='1.0' encoding='utf-8'?>
<section xml:id="module-1" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Module 1</title>
  <p>These are the exercises in Module 1.</p>
  <exercise>
    <webwork source="Library/Rochester/setAlgebra01RealNumbers/sw1_2_13a.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/PCC/BasicAlgebra/OrderOfOperations/OOOFractions10.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/PCC/BasicAlgebra/FractionArithmetic/DivideFractions20.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/PCC/BasicAlgebra/FractionArithmetic/SubtractFractions06.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations260.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/PCC/BasicMath/OrderOfOperations_More/orderOfOperations52.pg"/>
  </exercise>
  <exercise>
    <webwork>
      <pg-code>
        Context("LimitedNumeric");

        $a=random(2,6,2);
        $b=random(5,9,1);
        $c=random(3,7,2);
        $d=random(1,7,2);
        $e=random(2,8,2);

        $ans=Compute(2**($a)*(2**($b)-2**($c)*(2**($d)+2**($e))));

        $step1 = 2**($d);
        $step2 = 2**($e);
        $step3 = $step1 + $step2;
        $step4 = 2**($c)*$step3;
        $step5 = 2**($b)*$step4;
      </pg-code>
      <statement>
        <p>Evaluate this expression:</p>
        <p><m>2^<var name="$a"/>[2^<var name="$b"/>-2^<var name="$c"/>(2^<var name="$d"/>+2^<var name="$e"/>)] =</m> <var name="$ans" width="2"/></p>
      </statement>
      <solution>
        <p>
          <m>
            \begin{aligned}
              &amp;\phantom{\mathrel{{}={}}}2^<var name="$a"/>[2^<var name="$b"/>-2^<var name="$c"/>(2^<var name="$d"/>+2^<var name="$e"/>)] \\
              &amp;=2^<var name="$a"/>[2^<var name="$b"/>-2^<var name="$c"/>(<var name="$step1"/>+<var name="$step2"/>)] \\
              &amp;=2^<var name="$a"/>[2^<var name="$b"/>-2^<var name="$c"/>\cdot<var name="$step3"/>] \\
              &amp;=2^<var name="$a"/>[2^<var name="$b"/>-<var name="$step4"/>] \\
              &amp;=2^<var name="$a"/>\cdot[<var name="$step5"/>] \\
              &amp;=<var name="$ans"/> \\
            \end{aligned}
          </m>
        </p>
      </solution>
    </webwork>
  </exercise>
  <exercise>
    <webwork source="Library/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations150.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/Mizzou/College_Algebra/Exponent_Laws/WriteasPower.pg"/>
  </exercise>
  <exercise>
    <webwork>
      <pg-code>
        $a = random(2,6,2);
        $b = random(2,4,2);

        $n1 = random(3,5,1);
        $n2 = random(3,5,1);
        $n3 = random(2,6,1);

        $ans1 = ($a**$n2)/$b;
        $ans2 = $n1*$n2-$n3;
      </pg-code>
      <statement>
        <p>The expression</p>
        <p><m>\frac{(<var name="$a"/>y^{<var name="$n1"/>})^<var name="$n2"/>}{<var name="$b"/>y^<var name="$n3"/>}</m></p>
        <p>equals <m>cy^e</m> where the coefficient <m>c</m> is <var name="$ans1" width="2"/>, the exponent <m>e</m> of <m>y</m> is <var name="$ans2" width="2"/>.</p>
      </statement>
    </webwork>
  </exercise>
  <exercise>
    <webwork source="Library/Rochester/setAlgebra02ExponentsRadicals/nsc2s7p1.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/Mizzou/Algebra/exponents_integers/exp_ints_09.pg"/>
  </exercise>
  <exercise>
    <webwork>
      <pg-code>
        Context()->strings->add(A=>{});
        Context()->strings->add(B=>{});
        Context()->strings->add(C=>{});
        Context()->strings->add(D=>{});

        $a0 = random(-10,-2,1);
        $a1 = $a0+random(1,6,1);
        $a2 = $a1+random(1,6,1);

        $qi1 = random(0,5,1);
        do {
          $qi2 = random(0,5,1);
        } until($qi2 != $qi1);
        do {
          $qi3 = random(0,5,1);
        } until(($qi3 != $qi1) &amp;&amp; ($qi3 != $qi2));
        do {
          $qi4 = random(0,5,1);
        } until(($qi4 != $qi1) &amp;&amp; ($qi4 != $qi2) &amp;&amp; ($qi4 != $qi3));

        $ai1 = random(0,3,1);
        do {
          $ai2 = random(0,3,1);
        } until($ai2 != $ai1);
        do {
          $ai3 = random(0,3,1);
        } until(($ai3 != $ai1) &amp;&amp; ($ai3 != $ai2));
        do {
          $ai4 = random(0,3,1);
        } until(($ai4 != $ai1) &amp;&amp; ($ai4 != $ai2) &amp;&amp; ($ai4 != $ai3));

        $questStr1 = "(S \cap T)";
        $ansStr1 = "($a1, $a2]";

        $questStr2 = "(S \cap W)";
        $ansStr2 = "($a1, $a2)";

        $questStr3 = "(T \cap W)";
        $ansStr3 = "[$a0, $a2)";

        $questStr4 = "(S \cup T)";
        $ansStr4 = "(-\infty, \infty)";

        $questStr5 = "(S \cup W )";
        $ansStr5 = "[$a0, \infty)";

        $questStr6 = "(T \cup W)";
        $ansStr6 = "(-\infty, $a2]";

        @questions = ($questStr1,$questStr2,$questStr3,$questStr4,$questStr5,$questStr6);
        @answers = ($ansStr1,$ansStr2,$ansStr3,$ansStr4,$ansStr5,$ansStr6);

        # Now randomize the questions:
        @selectedQuestions = ($questions[$qi1], $questions[$qi2], $questions[$qi3], $questions[$qi4]);
        @selectedAnswers = ($answers[$qi1], $answers[$qi2], $answers[$qi3], $answers[$qi4]);
        $q1 = $selectedQuestions[0];
        $q2 = $selectedQuestions[1];
        $q3 = $selectedQuestions[2];
        $q4 = $selectedQuestions[3];

        @answerLetters = ("A", "B", "C", "D");

        $correctAnswer1 = $answerLetters[$ai1];
        $correctAnswer2 = $answerLetters[$ai2];
        $correctAnswer3 = $answerLetters[$ai3];
        $correctAnswer4 = $answerLetters[$ai4];

        @answerChoices = ("", "", "", "");

        $answerChoices[$ai1] = $selectedAnswers[0];
        $answerChoices[$ai2] = $selectedAnswers[1];
        $answerChoices[$ai3] = $selectedAnswers[2];
        $answerChoices[$ai4] = $selectedAnswers[3];

        $ans1 = $answerChoices[0];
        $ans2 = $answerChoices[1];
        $ans3 = $answerChoices[2];
        $ans4 = $answerChoices[3];
      </pg-code>
      <statement>
        <p>Let <m>S=(<var name="$a1"/>,\infty)</m>, <m>T=(-\infty,<var name="$a2"/>]</m>, and <m>W=[<var name="$a0"/>,<var name="$a2"/>)</m></p>
        <p>For each intersection or union, choose the correct notation for the resulting interval.</p>
        <p><var name="$correctAnswer1" width="2"/> 1. <m><var name="$q1"/></m></p>
        <p><var name="$correctAnswer2" width="2"/> 2. <m><var name="$q2"/></m></p>
        <p><var name="$correctAnswer3" width="2"/> 3. <m><var name="$q3"/></m></p>
        <p><var name="$correctAnswer4" width="2"/> 4. <m><var name="$q4"/></m></p>

        <p>A. <m><var name="$ans1"/></m></p>
        <p>B. <m><var name="$ans2"/></m></p>
        <p>C. <m><var name="$ans3"/></m></p>
        <p>D. <m><var name="$ans4"/></m></p>
      </statement>
    </webwork>
  </exercise>
  <exercise>
    <webwork source="Library/Rochester/setAlgebra01RealNumbers/lhp1_37-44_mo.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/Rochester/setAlgebra01RealNumbers/lhp1_31-34_mo.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/Mizzou/Intermediate_Algebra/Compound_Inequalities/P_02.pg"/>
  </exercise>
  <exercise>
    <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Interval_Notation/Graph_Two_Intervals_Union.pg"/>
  </exercise>
  <exercise>
    <webwork>
      <pg-code>
        $a = random(1,3,1); 
        $b = random(-4,0,1);

        @interval = ("[-5,$a]","($b,4)","[-5,$a)","[$b,4)","[$a,$b)");
        $choose = random(0,2,2);

        @slice = NchooseK(3,3);
        @colors = ("blue", "red", "green");
        @sc = @colors[@slice]; #scrambled colors

        $f = FEQ("2 for x in $interval[$choose] using color=$sc[0] and weight=3");
        $g = FEQ("-1 for x in $interval[$choose+1] using color=$sc[1] and weight=3");

        $graph = init_graph(-6,-3,6,3,'pixels'=>[300,100]);

        $graph->moveTo(-6,2);      #Draw x-axis and tick marks
        $graph->lineTo(6,2);
        $i = -5;
        do {
           $lab=new Label($i,1.5,"$i",'black','center','center');
           $graph->lb($lab);
           $graph->moveTo($i,2.25);
           $graph->lineTo($i,1.75);
           $i++;
        } until ($i > 5);

        $graph->moveTo(-6,-1);      #Draw x-axis and tick marks
        $graph->lineTo(6,-1);
        $i = -5;
        do {
           $lab=new Label($i,-2,"$i",'black','center','center');
           $graph->lb($lab);
           $graph->moveTo($i,-.75);
           $graph->lineTo($i,-1.25);
           $i++;
        } until ($i > 5);

        add_functions( $graph,$f,$g);

        Context("Inequalities");
        $ans_a = Compute("[-5,4)");

        @ans_b_list = ("($b,$a]","[$b,$a)");
        $ans_b = Interval($ans_b_list[$choose/2]);

      </pg-code>
      <statement>
        <image pg-name="$graph" width="85%">
          <description>graph of two intervals.</description>
        </image>
        <p>For the graphs shown above, find the following:</p>
        <p>a) Write a compound inequality to describe the <em>union</em> of the points shown in the graphs.</p>
        <p>Answer: <var name="$ans_a" width="5"/></p>
        <p>b) Write a compound inequality to describe the <em>intersection</em> of the points shown in the graphs.</p>
        <p>Answer: <var name="$ans_b" width="5"/></p>
      </statement>
    </webwork>
  </exercise>
  <exercise>
    <webwork source="Library/CollegeOfIdaho/setAlgebra_04_01_LinearInequalities/41IntAlg_04_LinearIneq.pg"/>
  </exercise>
  <exercise>
    <webwork>
      <pg-code>
        Context("Interval");
        $gwidth = 600;
        $gheight = 100;
        @ticks = (-10..10);
        $gr = init_graph(-12,-1,12,1,size=>[$gwidth,$gheight]);
        $gr->moveTo(0,0);
        $gr->arrowTo(11,0);
        $gr->arrowTo(-11,0);
        $gr->h_ticks(0,'black',@ticks);
        foreach (@ticks) {
          $gr->lb(new Label($_,-1/8,"$_",'black','top','center'));
        }

        $a1 = random(-10,3);
        $b1 = random($a1+1,5);
        $casea1 = random(0,2,1); # 0 - open circ, 1 - closed circ, 2 - goes to inf
        $caseb1 = random(0,1,1);

        if ($casea1 == 0 &amp;&amp; $caseb1 == 0) {
          $int = "($a1,$b1)";
        } elsif ($casea1 == 0 &amp;&amp; $caseb1 == 1) {
          $int = "($a1,$b1]";
        } elsif ($casea1 == 1 &amp;&amp; $caseb1 == 0) {
          $int = "[$a1,$b1)";
        } elsif ($casea1 == 1 &amp;&amp; $caseb1 == 1) {
          $int = "[$a1,$b1]";
        } elsif ($casea1 == 2 &amp;&amp; $caseb1 == 0) {
          $int = "(-inf,$b1)";
        } elsif ($casea1 == 2 &amp;&amp; $caseb1 == 1) {
          $int = "(-inf,$b1]";
        }
        $int = $int."U";

        if ($casea1 == 0 || $casea1 == 1) {
          $gr->moveTo($a1,0);
          $gr->lineTo($b1,0,'blue','3');
        } elsif ($casea1 == 2) {
          $gr->moveTo($b1,0);
          $gr->arrowTo(-11,0,'blue','3');
        }

        if ($casea1 == 0) {
          $gr->stamps(open_circle($a1,0,'blue'));
        } elsif ($casea1 == 1) {
          $gr->stamps(closed_circle($a1,0,'blue'));
        }

        if ($caseb1 == 0) {
          $gr->stamps(open_circle($b1,0,'blue'));
        } elsif ($caseb1 == 1) {
          $gr->stamps(closed_circle($b1,0,'blue'));
        }

        $a2 = random($b1+1,8);
        $b2 = random($a2+1,10);
        $casea2 = random(0,1,1); # 0 - open circ, 1 - closed circ, 2 - goes to inf
        $caseb2 = random(0,2,1);

        if ($casea2 == 0 &amp;&amp; $caseb2 == 0) {
          $int = $int."($a2,$b2)";
        } elsif ($casea2 == 0 &amp;&amp; $caseb2 == 1) {
          $int = $int."($a2,$b2]";
        } elsif ($casea2 == 0 &amp;&amp; $caseb2 == 2) {
          $int = $int."($a2,inf)";
        } elsif ($casea2 == 1 &amp;&amp; $caseb2 == 0) {
          $int = $int."[$a2,$b2)";
        } elsif ($casea2 == 1 &amp;&amp; $caseb2 == 1) {
          $int = $int."[$a2,$b2]";
        } elsif ($casea2 == 1 &amp;&amp; $caseb2 == 2) {
          $int = $int."[$a2,inf)";
        }

        if ($caseb2 == 0 || $caseb2 == 1) {
          $gr->moveTo($a2,0);
          $gr->lineTo($b2,0,'blue','3');
        } elsif ($caseb2 == 2) {
          $gr->moveTo($a2,0);
          $gr->arrowTo(11,0,'blue','3');
        }

        if ($casea2 == 0) {
          $gr->stamps(open_circle($a2,0,'blue'));
        } elsif ($casea2 == 1) {
          $gr->stamps(closed_circle($a2,0,'blue'));
        }

        if ($caseb2 == 0) {
          $gr->stamps(open_circle($b2,0,'blue'));
        } elsif ($caseb2 == 1) {
          $gr->stamps(closed_circle($b2,0,'blue'));
        }

        $ans = Compute($int);
      </pg-code>
      <statement>
        <p>Write the interval notation for the given graph:</p>
        <p>If the set includes more than one interval, they are joined using the union symbol U.  We use the captial letter of "u" as the union symbol.</p>
        <image pg-name="$gr" width="85%">
          <description>graph of an interval.</description>
        </image>
        <p>Answer: <var name="$ans" width="5"/></p>
      </statement>
    </webwork>
  </exercise>
</section>
